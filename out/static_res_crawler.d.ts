/// <reference types="node" />
import { localServer } from "./local_server";
import * as parameters from "./parameters";
import { zippedAssets } from "./zipped_assets";
declare type fsckStatus = {
    passed: number;
    deleted: number;
    remaining: number;
    notPassed: number;
};
export declare class crawler {
    private readonly params;
    private readonly localServer;
    isWebResCompleted: boolean;
    isAssetsCompleted: boolean;
    private static readonly htmlRegEx;
    private static readonly javaScriptRegEx;
    private static readonly jsonRegEx;
    private static readonly md5RegEx;
    private static readonly fileExtRegEx;
    private static readonly compressableFileExtSet;
    private readonly device_id;
    private get timeStampSec();
    static readonly defMimeType = "application/octet-stream";
    private readonly staticFileMap;
    private readonly staticFile404Set;
    private readonly localRootDir;
    private readonly localConflictDir;
    private static readonly staticFileMapPath;
    private static readonly staticFileMapPathUncomp;
    private static readonly staticFile404SetPath;
    private static readonly staticFile404SetPathUncomp;
    private readonly localStagingCNDir;
    private static readonly brotliQuality;
    private zippedAssets;
    private static readonly prodHost;
    private get httpsProdMagicaNoSlash();
    private static readonly patchHost;
    private get httpsPatchMagicaNoSlash();
    static readonly maintenanceConfigStr: string;
    static readonly maintenanceViewJsonStr: string;
    stopCrawling: boolean;
    get isCrawling(): boolean;
    private _isCrawling;
    get lastError(): any;
    private _lastError?;
    get crawlingStatus(): string;
    private _crawlingStatus;
    get isCrawlingFullyCompleted(): boolean;
    private isCrawlingCompleted;
    get isFscking(): boolean;
    get lastFsckResult(): string;
    get fsckStatus(): fsckStatus | undefined;
    private _fsckStatus?;
    private constructor();
    static init(params: parameters.params, localsvr: localServer, zippedAssets: zippedAssets): Promise<crawler>;
    fetchAllAsync(): Promise<void>;
    getFetchAllPromise(): Promise<void>;
    getContentType(pathInUrl: string): string;
    private readFile;
    private deleteFileIfMatch;
    readFileAsync(pathInUrl: string): Promise<Buffer | undefined>;
    saveFile(pathInUrl: string, content: Buffer, contentType: string | undefined, preCalcMd5?: string): void;
    private checkAlreadyExist;
    private updateFileMeta;
    private saveFileMeta;
    fsck(): Promise<boolean>;
    isKnown404(pathInUrl: string): boolean;
    private checkStaticCompleted;
    private http2Request;
    private http2GetStr;
    private http2GetBuf;
    private http2PostRetStr;
    private http2PostRetBuf;
    private batchHttp2GetSave;
    private fetchSinglePage;
    private fetchFilesInReplacementJs;
    private static readonly assetListFileNameList;
    private readAssetVer;
    private fetchAssetConfig;
    private fetchAssets;
}
export {};
